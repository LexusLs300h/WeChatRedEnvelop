name: Build Debian Package

on:
  push:
    branches: [ main, master ]  # 触发构建的分支
  pull_request:
    branches: [ main, master ]

jobs:
  build-deb:
    runs-on: ubuntu-latest  # 使用 Ubuntu 环境，原生支持 deb 构建

    steps:
      # 1. 检出代码仓库
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 确保获取完整历史，可能影响版本号生成

      # 2. 安装构建依赖 (根据实际需求调整依赖包)
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            devscripts \
            debhelper \
            dh-make \
            fakeroot  # 核心依赖包，按需添加其他如 gcc、make 等

      # 3. 创建 Debian 包基础结构（生成 changelog 等文件）
      - name: Create Debian structure
        run: |
          # 进入源代码目录 (根据你的项目结构调整路径，这里假设源代码在仓库根目录)
          cd ./src
          # 替换为实际的包名和版本号，格式为 "包名_版本号"
          dh_make --createorig --yes --single -p your-package-name_1.0.0

      # 4. 构建 Debian 包 (关键步骤)
      - name: Build the DEB package
        run: |
          # 进入源代码目录 (根据你的项目结构调整路径，这里假设源代码在仓库根目录)
          cd ./src
          # 执行构建，-us -uc 表示不签名 (用于测试，正式发布需配置 GPG)
          dpkg-buildpackage -us -uc -b

      # 5. 归档构建产物 (deb 文件)
      - name: Archive DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-packages
          path: |
            ../*.deb  # dpkg-buildpackage 会在上级目录生成 deb 文件
            ../*.changes
            ../*.buildinfo
